For echo calc (or just combining two note columns into one via FM stuff):
- get tracker data from clipboard
- extract header and note names from data
- convert note names to values
- FOR EACH ROW:
    - handle non-notes
        - if same do the same
        - if a (note/macro) release is present, do a macro release
        - if a note off/release is present
            - if both non-notes, do an EC01
            - else (note + off), change instrument to opmask the "off" note
        - set ratio to take previous note into account
    - set instrument to no opmasks
    - determine note ratio
        - use difference2note; otherwise, it's just too complicated
    - determine tuning from ratio
        - use multiple2tuning
        - average the results from each multiplier value
    - determine "gcf" note
        //-numpy.gcd(x, y)    //idea but not reliable. 12TET tuning does not like this
        - use difference2note; otherwise, it's just too complicated
    - output all data to an object
- use header and object list to generate pattern data
- copy pattern data to clipboard

For SSG-EG calc:
- get tracker data from clipboard
- extract header and note names from data
- convert note names to frequency values
    - convert note name to note value
        - use NoteValueConverter() here
    - convert note value to frequency
        - f = frequency; f0 = reference frequency; n is the number of semitones
        - f = f0 * 2 ^ (n / 12)
            - Source: https://www.reddit.com/r/musictheory/comments/j3q0i3/how_can_you_calculate_the_frequency_of_a_given/g7dnag5/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
        - f0 = 440 # hz for A4
        - n = note_value + 57 # 57 is the note value for A4
- FOR EACH ROW:
    - find optimal ssg-eg settings for desired frequency
        - sort results in order of lowest difference in decay values
        - sub-sort that in order of sustain closest to 7
        - The best option should have the lowest difference with the middlest sustain
    - if optimal settings are too detuned/distored, increment the respective warning counter
    - output settings as effects
    - store effects in object
- use header and object list to generate pattern data
- output the number of each warning type raised
- copy pattern data to clipboard