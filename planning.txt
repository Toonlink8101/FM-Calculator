For echo calc (or just combining two note columns into one via FM stuff):
- get tracker data from clipboard
- extract header and note names from data
- convert note names to values
- FOR EACH ROW:
    - handle non-notes
        - if same do the same
        - if a (note/macro) release is present, do a macro release
        - if a note off/release is present
            - if both non-notes, do an EC01
            - else (note + off), change instrument to opmask the "off" note
        - set ratio to take previous note into account
    - set instrument to no opmasks
    - determine "gcf" note
        -numpy.gcd(x, y)    //idea but not reliable. 12TET tuning does not like this
    - determine note ratio
        - divide each by gcd
        - if either is outside of range, then out a warning of some kind
        - otherwise output the ratio between the notes
    - determine tuning from ratio
        - Reuse parts of FM_Interval_Calculator
    - output all data to an object
- use header and object list to generate pattern data
- copy pattern data to clipboard

For SSG-EG calc:
- get tracker data from clipboard
- extract header and note names from data
- convert note names to frequency values
- FOR EACH ROW:
    - find optimal ssg-eg settings for desired frequency
    - if optimal settings are too detuned, increment a warning counter
    - output settings as effects
    - store effects in object
- use header and object list to generate pattern data
- output the number of notes that raised a warning
- copy pattern data to clipboard